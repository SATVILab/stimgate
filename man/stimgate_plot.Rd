% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_gate.R
\name{stimgate_plot}
\alias{stimgate_plot}
\title{Plot stimulation gate}
\usage{
stimgate_plot(
  ind,
  .data,
  path_project,
  marker,
  ind_lab = NULL,
  marker_lab = NULL,
  exc_min = TRUE,
  limits_expand = NULL,
  limits_equal = FALSE,
  grid = TRUE,
  grid_n_col = 2,
  show_gate = TRUE,
  min_cell = 10
)
}
\arguments{
\item{ind}{numeric vector. Specifies indices in \code{.data} to plot.}

\item{.data}{GatingSet. Same GatingSet passed to \code{stimgate_gate}.}

\item{path_project}{character. Path to the project directory used for \code{stimgate_gate}.}

\item{marker}{character vector of length one or two. Specifies markers (channels, really)
to be plotted. If only one is passed, then only univariate plots are created.}

\item{ind_lab}{named character vector.
Labels for \code{ind} used in plot.
Optional.}

\item{marker_lab}{named character vector.
Labels for \code{marker} used in plot.
Optional.}

\item{exc_min}{Logical.
If \code{TRUE}, excludes the minimum expression values when processing the data.
Default is \code{TRUE}.}

\item{limits_expand}{list.
Expand the limits of the plot axes.
Default is \code{NULL}.}

\item{limits_equal}{Logical.
If TRUE, forces equal lengths of the limits.}

\item{grid}{Logical.
If TRUE, arranges the resulting plots in a grid format
using \code{cowplot::plot_grid}.
Default is \code{TRUE}.}

\item{grid_n_col}{Integer.
Number of columns in grid layout.}

\item{show_gate}{Logical.
If \code{TRUE}, overlays gate lines on the plots.|>
Default is \code{TRUE}.}

\item{min_cell}{integer.
Minimum number of cells to be plotted.
Will skip plots with fewer cells.
Default is 10.}
}
\value{
A grid of plots if \code{grid} is TRUE, otherwise a list of ggplot objects.
}
\description{
Plot bivariate hex and univariate density plots for batches of samples, along
with their gates.
}
\examples{
# Create example data and run gating
fs <- get_fs()
chnl_list <- get_chnl_list(fs = fs)
batch_list <- chnl_list[[1]]$batch_list
fs_gate <- chnl_list[[length(chnl_list)]]$fs
dir_cache <- file.path(tempdir(), "stimgate_gate")
if (dir.exists(dir_cache)) {
  unlink(dir_cache, recursive = TRUE)
}
dir.create(dir_cache, recursive = TRUE)
path_gs <- get_gatingset(
  fs = fs_gate,
  dir_cache = dir_cache
)
gs <- flowWorkspace::load_gs(path_gs)
path_project <- file.path(dir_cache, "stimgate")

# Run gating
stimgate::stimgate_gate(
  .data = gs,
  path_project = path_project,
  pop_gate = "root",
  batch_list = batch_list,
  marker = names(chnl_list)
)

# Create plots
plots <- stimgate_plot(
  ind = batch_list[[1]], # indices in `gs` to plot
  .data = gs, # GatingSet
  path_project = path_project,
  marker = names(chnl_list),
  grid = TRUE
)
}
